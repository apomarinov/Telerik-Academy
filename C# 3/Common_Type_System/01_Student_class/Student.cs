// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Text;
using System.Collections.Generic;
using System.Reflection;

namespace SchoolSystem
{
	public class Student : ICloneable, IComparable<Student>
	{
		private string firstName;
		private string lastName;
		private long ssn;
		private string address;
		private string phone;
		private string email;
		private string course;

		public Student (string firstName, string lastName)
		{
			this.FirstName = firstName;
			this.LastName = lastName;
		}
		
		
		public Student (string firstName, string lastName, long ssn, string address, string phone, string email, string course, SchoolSystem.University university, SchoolSystem.Faculty faculty, SchoolSystem.Specialty specialty)
		{
			this.FirstName = firstName;
			this.LastName = lastName;
			this.SSN = ssn;
			this.Address = address;
			this.Phone = phone;
			this.Email = email;
			this.Course = course;
			this.University = university;
			this.Faculty = faculty;
			this.Specialty = specialty;
			this.FirstName = firstName;
			this.LastName = lastName;
			this.SSN = ssn;
			this.Address = address;
			this.Phone = phone;
			this.Email = email;
			this.Course = course;
			this.University = university;
			this.Faculty = faculty;
			this.Specialty = specialty;
		}

		public string FirstName {
			get {
				return this.firstName;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid FirstName");
				}
				firstName = value;
			}
		}

		public string LastName {
			get {
				return this.lastName;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid LastName");
				}
				lastName = value;
			}
		}

		public long SSN {
			get {
				return this.ssn;
			}
			set {
				if (value <= 0) {
					throw new ArgumentException ("Invalid SSN");
				}
				ssn = value;
			}
		}

		public string Address {
			get {
				return this.address;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid Address");
				}
				address = value;
			}
		}

		public string Phone {
			get {
				return this.phone;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid Phone");
				}
				phone = value;
			}
		}

		public string Email {
			get {
				return this.email;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid Email");
				}
				email = value;
			}
		}

		public string Course {
			get {
				return this.course;
			}
			set {
				if (string.IsNullOrEmpty (value)) {
					throw new ArgumentException ("Invalid Course");
				}
				course = value;
			}
		}

		public University University { get; private set; }

		public Faculty Faculty { get; private set; }

		public Specialty Specialty { get; private set; }
		
		public override string ToString ()
		{			
			PropertyInfo[] properties = this.GetType ().GetProperties ();
			StringBuilder propertiesFormat = new StringBuilder ();
			
			foreach (PropertyInfo property in properties) {
				propertiesFormat.AppendFormat ("{0}: {1}\n", property.Name, property.GetValue (this, null));
			}
			
			return propertiesFormat.ToString ();
		}
		
		public override bool Equals (object param)
		{
			Student student = param as Student;
			
			if (student == null
				|| this.FirstName != student.FirstName
				|| this.LastName != student.LastName			   
				|| this.Specialty != student.Specialty
				|| this.Faculty != student.Faculty
				|| this.University != student.University) {
				return false;
			} 
			
			return true;
		}
		
		public static bool operator == (Student student1, Student student2)
		{
			return Object.Equals (student1, student2);
		}
		
		public static bool operator != (Student student1, Student student2)
		{
			return !Object.Equals (student1, student2);
		}
		
		public override int GetHashCode ()
		{			
			PropertyInfo[] properties = this.GetType ().GetProperties ();
		
			int hash = properties [0].GetHashCode ();
			foreach (PropertyInfo property in properties) {
				hash = (hash * 17) + property.GetValue (this, null).GetHashCode ();
			}			

			return hash;
		}
		
		public object Clone ()
		{
			return new Student (this.FirstName, this.LastName, this.SSN, this.Address, this.Phone,
			                    this.Email, this.Course, this.University, this.Faculty, this.Specialty);
		}

		public int CompareTo (Student other)
		{
			string thisNames = this.FirstName + this.LastName;
			string otherNames = other.FirstName + other.LastName;
			int namesCompare = thisNames.CompareTo (otherNames);
			
			if (namesCompare != 0) {
				return namesCompare;
			}
			
			return this.SSN.CompareTo (other.SSN);
		}
	}
}

